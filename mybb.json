{
  "AWSTemplateFormatVersion": "2010-09-09",

  "Description": "Cloudformation template to MyBB forum. It contains an autoscale and load-balance web attached to RDS multi-AZ.",

  "Parameters": {
    "DBName": {
      "Description": "Database name of MySQL",
      "Type": "String",
      "Default": "mybb",
      "MinLength": "1",
      "MaxLength": "64",
      "AllowedPattern": "[a-zA-Z][a-zA-Z0-9]*",
      "ConstraintDescription": "Must begin with a letter and contain only alphanum. chars, not special chars"
    },
    "DBPort": {
      "Description": "TCP/IP port number for the MySQL db (the default is 3306)",
      "Type": "String",
      "Default": "3306",
      "MinLength": "1",
      "MaxLength": "5",
      "AllowedPattern": "[0-9]*"
    },
    "DBUser": {
      "Description": "MySQL db username",
      "Type": "String",
      "Default": "dbuser",
      "MinLength": "1",
      "MaxLength": "16",
      "AllowedPattern": "[a-zA-Z][a-zA-Z0-9]*",
      "ConstraintDescription": "Must begin with a letter and contain only alphanum chars"
    },
    "DBPassword": {
      "Description": "MySQL db password",
      "NoEcho": "true",
      "Type": "String",
      "MinLength": "8",
      "MaxLength": "41",
      "AllowedPattern": "[a-zA-Z0-9]*",
      "ConstraintDescription": "Must contain only alphanum chars"
    },
    "DBClass": {
      "Description": "RDS DB Instance Class",
      "Type": "String",
      "Default": "db.t2.micro",
      "AllowedValues": [
        "db.t2.micro",
        "db.t2.small",
        "db.t2.medium",
        "db.t2.large",
        "db.m4.large",
        "db.m4.xlarge",
        "db.m4.2xlarge",
        "db.m4.4xlarge",
        "db.m4.10xlarge",
        "db.m3.medium",
        "db.m3.large",
        "db.m3.xlarge",
        "db.m3.2xlarge",
        "db.r3.large",
        "db.r3.xlarge",
        "db.r3.2xlarge",
        "db.r3.4xlarge",
        "db.r3.8xlarge",
        "db.m2.xlarge",
        "db.m2.2xlarge",
        "db.m2.4xlarge",
        "db.m1.small",
        "db.m1.medium",
        "db.m1.large",
        "db.m1.xlarge",
        "db.t1.micro"
      ],
      "ConstraintDescription": "must be a valid EC2 instance type"
    },
    "DBAllocatedStorage": {
      "Description": "RDS Database Size (in GB)",
      "Type": "Number",
      "Default": "20",
      "MinValue": "20",
      "MaxValue": "6144",
      "ConstraintDescription": "Free tier between 20GB and 6144 GB."
    },
    "MyBbTablePrefix": {
      "Description": "MyBB table prefix (leave unchanged, if unsure)",
      "Type": "String",
      "Default": "mybb_"
    },
    "InstanceType": {
      "Description": "WebServer EC2 Instance Type",
      "Type": "String",
      "Default": "t2.micro",
      "AllowedValues": [
        "t2.micro",
        "t2.small",
        "t2.medium",
        "t2.large",
        "m4.large",
        "m4.xlarge",
        "m4.2xlarge",
        "m4.4xlarge",
        "m4.10xlarge",
        "c4.large",
        "c4.xlarge",
        "c4.2xlarge",
        "c4.4xlarge",
        "c4.8xlarge",
        "m3.medium",
        "m3.large",
        "m3.xlarge",
        "m3.2xlarge",
        "c3.large",
        "c3.xlarge",
        "c3.2xlarge",
        "c3.4xlarge",
        "c3.8xlarge"
      ],
      "ConstraintDescription": "Please, a valid EC2 Instance Type."
    },
    "WebServerCapacity": {
      "Description": "Number of EC2 instances to launch (Desired initial capacity)",
      "Type": "Number",
      "Default": "2",
      "MinValue": "1",
      "MaxValue": "10",
      "ConstraintDescription": "Must be between 1 and 10 EC2 instances."
    },
    "KeyName": {
      "Description": "The name of an existing EC2 KeyPair enabling SSH access",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "MinLength": "1",
      "MaxLength": "64",
      "AllowedPattern": "[-_ a-zA-Z0-9]*",
      "ConstraintDescription": "can contain only alphanumeric characters, spaces, dashes and underscores and must be the name of an existing EC2 KeyPair"
    },
    "SSHLocation": {
      "Description": "From where SSH can be acessed (Default - 0.0.0.0/0 - from anywhere)",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "0.0.0.0/0",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "Please, use the pattern x.x.x.x/x."
    },
    "NewRelicLicenseKey": {
      "Description": "New Relic License Key.",
      "Default": "0000000000000000000000000000000000000000",
      "Type": "String",
      "MinLength": "40",
      "MaxLength": "40",
      "AllowedPattern": "[0-9a-fA-F]+",
      "ConstraintDescription": "Sequence of 40 hexadecimal chars"
    },
    "OperatorEmail": {
      "Description": "Email to notify if there issues",
      "Type": "String",
      "Default": "changehere@changehere.com",
      "AllowedPattern": "([a-zA-Z0-9_\\-\\.]+)@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.)|(([a-zA-Z0-9\\-]+\\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\\]?)",
      "ConstraintDescription": "Must be a valid email address."
    }
  },

  "Mappings": {
    "AWSInstanceType2Arch": {
      "t2.micro": {
        "Arch": "64"
      },
      "t2.small": {
        "Arch": "64"
      },
      "t2.medium": {
        "Arch": "64"
      },
      "t2.large": {
        "Arch": "64"
      },
      "m4.large": {
        "Arch": "64"
      },
      "m4.xlarge": {
        "Arch": "64"
      },
      "m4.2xlarge": {
        "Arch": "64"
      },
      "m4.4xlarge": {
        "Arch": "64"
      },
      "m4.10xlarge": {
        "Arch": "64"
      },
      "m3.medium": {
        "Arch": "64"
      },
      "m3.large": {
        "Arch": "64"
      },
      "m3.xlarge": {
        "Arch": "64"
      },
      "m3.2xlarge": {
        "Arch": "64"
      },
      "c4.large": {
        "Arch": "64"
      },
      "c4.xlarge": {
        "Arch": "64"
      },
      "c4.2xlarge": {
        "Arch": "64"
      },
      "c4.4xlarge": {
        "Arch": "64"
      },
      "c4.8xlarge": {
        "Arch": "64"
      },
      "c3.large": {
        "Arch": "64"
      },
      "c3.xlarge": {
        "Arch": "64"
      },
      "c3.2xlarge": {
        "Arch": "64"
      },
      "c3.4xlarge": {
        "Arch": "64"
      },
      "c3.8xlarge": {
        "Arch": "64"
      },
      "r3.large": {
        "Arch": "64"
      },
      "r3.xlarge": {
        "Arch": "64"
      },
      "r3.2xlarge": {
        "Arch": "64"
      },
      "r3.4xlarge": {
        "Arch": "64"
      },
      "r3.8xlarge": {
        "Arch": "64"
      }
    },
    "AWSRegionArch2AMI": {
      "ap-northeast-1": {
        "64": "ami-eb0a2985"
      },
      "ap-southeast-1": {
        "64": "ami-f78c4d94"
      },
      "eu-central-1": {
        "64": "ami-02392b6e"
      },
      "eu-west-1": {
        "64": "ami-6514ce16"
      },
      "sa-east-1": {
        "64": "ami-9f4cf6f3"
      },
      "us-east-1": {
        "64": "ami-7b89cc11"
      },
      "us-west-1": {
        "64": "ami-809df3e0"
      },
      "cn-north-1": {
        "64": "ami-a664f89f"
      },
      "us-gov-west": {
        "64": "ami-30b8da13"
      },
      "ap-southeast-2": {
        "64": "ami-a25a03c1"
      },
      "us-west-2": {
        "64": "ami-d24c5cb3"
      }
    },
    "AWSRegionCapabilities": {
      "us-east-1": {
        "RDSMultiAZ": "true"
      },
      "us-west-1": {
        "RDSMultiAZ": "true"
      },
      "eu-west-1": {
        "RDSMultiAZ": "true"
      },
      "ap-southeast-1": {
        "RDSMultiAZ": "true"
      },
      "ap-northeast-1": {
        "RDSMultiAZ": "true"
      }
    },
    "Region2Principal" : {
      "us-east-1"      : { "EC2Principal" : "ec2.amazonaws.com",    "OpsWorksPrincipal" : "opsworks.amazonaws.com"    },
      "us-west-2"      : { "EC2Principal" : "ec2.amazonaws.com",    "OpsWorksPrincipal" : "opsworks.amazonaws.com"    },
      "us-west-1"      : { "EC2Principal" : "ec2.amazonaws.com",    "OpsWorksPrincipal" : "opsworks.amazonaws.com"    },
      "eu-west-1"      : { "EC2Principal" : "ec2.amazonaws.com",    "OpsWorksPrincipal" : "opsworks.amazonaws.com"    },
      "ap-southeast-1" : { "EC2Principal" : "ec2.amazonaws.com",    "OpsWorksPrincipal" : "opsworks.amazonaws.com"    },
      "ap-northeast-1" : { "EC2Principal" : "ec2.amazonaws.com",    "OpsWorksPrincipal" : "opsworks.amazonaws.com"    },
      "ap-southeast-2" : { "EC2Principal" : "ec2.amazonaws.com",    "OpsWorksPrincipal" : "opsworks.amazonaws.com"    },
      "sa-east-1"      : { "EC2Principal" : "ec2.amazonaws.com",    "OpsWorksPrincipal" : "opsworks.amazonaws.com"    },
      "cn-north-1"     : { "EC2Principal" : "ec2.amazonaws.com.cn", "OpsWorksPrincipal" : "opsworks.amazonaws.com.cn" },
      "eu-central-1"   : { "EC2Principal" : "ec2.amazonaws.com",    "OpsWorksPrincipal" : "opsworks.amazonaws.com"    }
    },
    "Region2ARNPrefix": {
      "us-east-1"      : { "ARNPrefix": "arn:aws:"    },
      "us-west-1"      : { "ARNPrefix": "arn:aws:"    },
      "us-west-2"      : { "ARNPrefix": "arn:aws:"    },
      "eu-west-1"      : { "ARNPrefix": "arn:aws:"    },
      "ap-northeast-1" : { "ARNPrefix": "arn:aws:"    },
      "ap-southeast-1" : { "ARNPrefix": "arn:aws:"    },
      "ap-southeast-2" : { "ARNPrefix": "arn:aws:"    },
      "sa-east-1"      : { "ARNPrefix": "arn:aws:"    },
      "cn-north-1"     : { "ARNPrefix": "arn:aws-cn:" },
      "eu-central-1"   : { "ARNPrefix": "arn:aws:"    }
    },
    "SubnetConfig": {
      "VPC": {
        "CIDR": "10.0.0.0/16"
      },
      "Public": {
        "CIDR": "10.0.0.0/24"
      },
      "RDS1": {
        "CIDR": "10.0.10.0/24"
      },
      "RDS2": {
        "CIDR": "10.0.11.0/24"
      }
    }
  },

  "Resources": {
    "VPC": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "CidrBlock": {
          "Fn::FindInMap": ["SubnetConfig", "VPC", "CIDR"]
        },
        "EnableDnsSupport": "true",
        "EnableDnsHostnames": "true",
        "Tags": [{
            "Key": "Application",
            "Value": "VPC"
          },
          {
            "Key": "Network",
            "Value": "VPC"
          }
        ]
      }
    },
    "PublicSubnet": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "CidrBlock": {
          "Fn::FindInMap": ["SubnetConfig", "Public", "CIDR"]
        },
        "Tags": [{
            "Key": "Application",
            "Value": "Subnet"
          },
          {
            "Key": "Network",
            "Value": "Public"
          }
        ]
      }
    },
    "RDSSubnet1": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "AvailabilityZone": {
          "Fn::Join": ["", [{
            "Ref": "AWS::Region"
          }, "a"]]
        },
        "CidrBlock": {
          "Fn::FindInMap": ["SubnetConfig", "RDS1", "CIDR"]
        },
        "Tags": [{
            "Key": "Application",
            "Value": "Subnet"
          },
          {
            "Key": "Network",
            "Value": "RDS - 1"
          }
        ]
      }
    },
    "RDSSubnet2": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "AvailabilityZone": {
          "Fn::Join": ["", [{
            "Ref": "AWS::Region"
          }, "b"]]
        },
        "CidrBlock": {
          "Fn::FindInMap": ["SubnetConfig", "RDS2", "CIDR"]
        },
        "Tags": [{
            "Key": "Application",
            "Value": "Subnet"
          },
          {
            "Key": "Network",
            "Value": "RDS - 2"
          }
        ]
      }
    },
    "InternetGateway": {
      "Type": "AWS::EC2::InternetGateway",
      "Properties": {
        "Tags": [{
            "Key": "Application",
            "Value": "InternetGateway"
          },
          {
            "Key": "Network",
            "Value": "InternetGateway"
          }
        ]
      }
    },
    "GatewayToInternet": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "InternetGatewayId": {
          "Ref": "InternetGateway"
        }
      }
    },
    "PublicRouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [{
            "Key": "Application",
            "Value": "RouteTable"
          },
          {
            "Key": "Network",
            "Value": "Public"
          }
        ]
      }
    },
    "PublicRoute": {
      "Type": "AWS::EC2::Route",
      "DependsOn": "GatewayToInternet",
      "Properties": {
        "RouteTableId": {
          "Ref": "PublicRouteTable"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "InternetGateway"
        }
      }
    },
    "PublicSubnetRouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "PublicSubnet"
        },
        "RouteTableId": {
          "Ref": "PublicRouteTable"
        }
      }
    },
    "PublicNetworkAcl": {
      "Type": "AWS::EC2::NetworkAcl",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [{
            "Key": "Application",
            "Value": "NetworkAcl"
          },
          {
            "Key": "Network",
            "Value": "Public"
          }
        ]
      }
    },
    "InboundHTTPPublicNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "PublicNetworkAcl"
        },
        "RuleNumber": "100",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": "0.0.0.0/0",
        "PortRange": {
          "From": "80",
          "To": "80"
        }
      }
    },
    "InboundDynamicPortPublicNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "PublicNetworkAcl"
        },
        "RuleNumber": "101",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": "0.0.0.0/0",
        "PortRange": {
          "From": "1024",
          "To": "65535"
        }
      }
    },
    "InboundSSHPublicNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "PublicNetworkAcl"
        },
        "RuleNumber": "102",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": {
          "Ref": "SSHLocation"
        },
        "PortRange": {
          "From": "22",
          "To": "22"
        }
      }
    },
    "OutboundPublicNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "PublicNetworkAcl"
        },
        "RuleNumber": "100",
        "Protocol": "-1",
        "RuleAction": "allow",
        "Egress": "true",
        "CidrBlock": "0.0.0.0/0",
        "PortRange": {
          "From": "0",
          "To": "65535"
        }
      }
    },
    "PublicSubnetNetworkAclAssociation": {
      "Type": "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "PublicSubnet"
        },
        "NetworkAclId": {
          "Ref": "PublicNetworkAcl"
        }
      }
    },
    "AlarmTopic": {
      "Type": "AWS::SNS::Topic",
      "Properties": {
        "Subscription": [{
          "Endpoint": {
            "Ref": "OperatorEmail"
          },
          "Protocol": "email"
        }]
      }
    },
    "ElasticLoadBalancer": {
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties": {
        "SecurityGroups": [{
          "Ref": "PublicLoadBalancerSecurityGroup"
        }],
        "Subnets": [{
          "Ref": "PublicSubnet"
        }],
        "Listeners": [{
          "LoadBalancerPort": "80",
          "InstancePort": "80",
          "Protocol": "HTTP"
        }],
        "HealthCheck": {
          "Target": "HTTP:80/",
          "HealthyThreshold": "3",
          "UnhealthyThreshold": "5",
          "Interval": "20",
          "Timeout": "5"
        }
      }
    },
    "PublicLoadBalancerSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Public ELB Security Group with HTTP access on port 80 from the internet",
        "VpcId": {
          "Ref": "VPC"
        },
        "SecurityGroupIngress": [{
          "IpProtocol": "tcp",
          "FromPort": "80",
          "ToPort": "80",
          "CidrIp": "0.0.0.0/0"
        }],
        "SecurityGroupEgress": [{
          "IpProtocol": "tcp",
          "FromPort": "80",
          "ToPort": "80",
          "CidrIp": "0.0.0.0/0"
        }]
      }
    },
    "LogRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [{
            "Effect": "Allow",
            "Principal": {
              "Service": [{
                "Fn::FindInMap": [
                  "Region2Principal",
                  {
                    "Ref": "AWS::Region"
                  },
                  "EC2Principal"
                ]
              }]
            },
            "Action": ["sts:AssumeRole"]
          }]
        },
        "Path": "/",
        "Policies": [{
          "PolicyName": "LogRolePolicy",
          "PolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [{
              "Effect": "Allow",
              "Action": [
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:PutLogEvents",
                "logs:DescribeLogStreams"
              ],
              "Resource": [{
                "Fn::Join": ["", [{
                    "Fn::FindInMap": [
                      "Region2ARNPrefix",
                      {
                        "Ref": "AWS::Region"
                      },
                      "ARNPrefix"
                    ]
                  },
                  "logs:*:*:*"
                ]]
              }]
            }]
          }
        }]
      }
    },

    "LogRoleInstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [{
          "Ref": "LogRole"
        }]
      },
      "DependsOn": "LogRole"
    },

    "CloudFormationLogs": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "RetentionInDays": 7
      }
    },

    "LaunchConfig": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Metadata": {
        "Comment1": "Configure the bootstrap helpers to install the Apache Web Server and PHP",
        "Comment2": "The website content is downloaded from the CloudFormationPHPSample.zip file",

        "AWS::CloudFormation::Init": {
          "config": {
            "packages": {
              "rpm": {
                "newrelic-sysmond": "https://download.newrelic.com/pub/newrelic/el5/i386/newrelic-repo-5-3.noarch.rpm",
                "newrelic-php5": "http://yum.newrelic.com/pub/newrelic/el5/x86_64/newrelic-repo-5-3.noarch.rpm"
              },

              "yum": {
                "httpd": [],
                "php": [],
                "php-mysql": [],
                "mysql": [],
                "awslogs": [],
                "newrelic-sysmond": [],
                "newrelic-php5": []
              }
            },

            "sources": {
              "/var/www/html": "https://github.com/mybb/mybb/tarball/mybb_1806"
            },

            "files": {
              "/usr/local/share/mybb/mybb-www.tar.gz": {
                "source": "https://github.com/rpherrera/mybb-cfn-www/archive/1806.tar.gz",
                "mode": "000644",
                "owner": "root",
                "group": "root"
              },

              "/usr/local/share/mybb/mybb-dump.sql": {
                "source": "https://raw.githubusercontent.com/rpherrera/mybb-cfn-db-dump/mysql-1806/mysql/mybb-dump.sql",
                "mode": "000644",
                "owner": "root",
                "group": "root"
              },

              "/etc/awslogs/awslogs.conf": {
                "content": {
                  "Fn::Join": ["", [
                    "[general]\n",
                    "state_file= /var/awslogs/state/agent-state\n",

                    "[/var/log/audit/audit.log]\n",
                    "file = /var/log/audit/audit.log\n",
                    "log_group_name = ", {
                      "Ref": "CloudFormationLogs"
                    }, "\n",
                    "log_stream_name = {instance_id}/audit\n",
                    "datetime_format = %d/%b/%Y:%H:%M:%S\n",

                    "[/var/log/cloud-init.log]\n",
                    "file = /var/log/cloud-init.log\n",
                    "log_group_name = ", {
                      "Ref": "CloudFormationLogs"
                    }, "\n",
                    "log_stream_name = {instance_id}/cloud-init.log\n",
                    "datetime_format = \n",

                    "[/var/log/cloud-init-output.log]\n",
                    "file = /var/log/cloud-init-output.log\n",
                    "log_group_name = ", {
                      "Ref": "CloudFormationLogs"
                    }, "\n",
                    "log_stream_name = {instance_id}/cloud-init-output.log\n",
                    "datetime_format = \n",

                    "[/var/log/cfn-init.log]\n",
                    "file = /var/log/cfn-init.log\n",
                    "log_group_name = ", {
                      "Ref": "CloudFormationLogs"
                    }, "\n",
                    "log_stream_name = {instance_id}/cfn-init.log\n",
                    "datetime_format = \n",

                    "[/var/log/cfn-hup.log]\n",
                    "file = /var/log/cfn-hup.log\n",
                    "log_group_name = ", {
                      "Ref": "CloudFormationLogs"
                    }, "\n",
                    "log_stream_name = {instance_id}/cfn-hup.log\n",
                    "datetime_format = \n",

                    "[/var/log/cfn-wire.log]\n",
                    "file = /var/log/cfn-wire.log\n",
                    "log_group_name = ", {
                      "Ref": "CloudFormationLogs"
                    }, "\n",
                    "log_stream_name = {instance_id}/cfn-wire.log\n",
                    "datetime_format = \n",

                    "[/var/log/cron]\n",
                    "file = /var/log/cron\n",
                    "log_group_name = ", {
                      "Ref": "CloudFormationLogs"
                    }, "\n",
                    "log_stream_name = {instance_id}/cron\n",
                    "datetime_format = \n",

                    "[/var/log/dmesg]\n",
                    "file = /var/log/dmesg\n",
                    "log_group_name = ", {
                      "Ref": "CloudFormationLogs"
                    }, "\n",
                    "log_stream_name = {instance_id}/dmesg\n",
                    "datetime_format = %d/%b/%Y:%H:%M:%S\n",

                    "[/var/log/httpd]\n",
                    "file = /var/log/httpd/*\n",
                    "log_group_name = ", {
                      "Ref": "CloudFormationLogs"
                    }, "\n",
                    "log_stream_name = {instance_id}/httpd\n",
                    "datetime_format = %d/%b/%Y:%H:%M:%S\n",

                    "[/var/log/messages]\n",
                    "file = /var/log/messages.log\n",
                    "log_group_name = ", {
                      "Ref": "CloudFormationLogs"
                    }, "\n",
                    "log_stream_name = {instance_id}/messages\n",
                    "datetime_format = %d/%b/%Y:%H:%M:%S\n",

                    "[/var/log/maillog]\n",
                    "file = /var/log/maillog\n",
                    "log_group_name = ", {
                      "Ref": "CloudFormationLogs"
                    }, "\n",
                    "log_stream_name = {instance_id}/maillog\n",
                    "datetime_format = \n",

                    "[/var/log/newrelic/newrelic-daemon.logn",
                    "file = /var/log/newrelic/newrelic-daemon.log\n",
                    "log_group_name = ", {
                      "Ref": "CloudFormationLogs"
                    }, "\n",
                    "log_stream_name = {instance_id}/newrelic-daemon\n",
                    "datetime_format = \n",

                    "[/var/log/newrelic/nrsysmond.log]\n",
                    "file = /var/log/newrelic/nrsysmond.log\n",
                    "log_group_name = ", {
                      "Ref": "CloudFormationLogs"
                    }, "\n",
                    "log_stream_name = {instance_id}/nrsysmond\n",
                    "datetime_format = \n",

                    "[/var/log/newrelic/php_agent.log]\n",
                    "file = /var/log/newrelic/php_agent.log\n",
                    "log_group_name = ", {
                      "Ref": "CloudFormationLogs"
                    }, "\n",
                    "log_stream_name = {instance_id}/php_agent\n",
                    "datetime_format = \n",

                    "[/var/log/secure]\n",
                    "file = /var/log/secure\n",
                    "log_group_name = ", {
                      "Ref": "CloudFormationLogs"
                    }, "\n",
                    "log_stream_name = {instance_id}/secure\n",
                    "datetime_format = \n",

                    "[/var/log/yum]\n",
                    "file = /var/log/yum\n",
                    "log_group_name = ", {
                      "Ref": "CloudFormationLogs"
                    }, "\n",
                    "log_stream_name = {instance_id}/yum\n",
                    "datetime_format = \n"
                  ]]
                },
                "mode": "000444",
                "owner": "root",
                "group": "root"
              },

              "/etc/awslogs/awscli.conf": {
                "content": {
                  "Fn::Join": ["", [
                    "[plugins]\n",
                    "cwlogs = cwlogs\n",
                    "[default]\n",
                    "region = ", {
                      "Ref": "AWS::Region"
                    }, "\n"
                  ]]
                },
                "mode": "000444",
                "owner": "root",
                "group": "root"
              },

              "/etc/cfn/cfn-hup.conf": {
                "content": {
                  "Fn::Join": ["", [
                    "[main]\n",
                    "stack=", {
                      "Ref": "AWS::StackId"
                    }, "\n",
                    "region=", {
                      "Ref": "AWS::Region"
                    }, "\n"
                  ]]
                },
                "mode": "000400",
                "owner": "root",
                "group": "root"
              },

              "/etc/cfn/hooks.d/cfn-auto-reloader.conf": {
                "content": {
                  "Fn::Join": ["", [
                    "[cfn-auto-reloader-hook]\n",
                    "triggers=post.update\n",
                    "path=Resources.LaunchConfig.Metadata.AWS::CloudFormation::Init\n",
                    "action=/opt/aws/bin/cfn-init -v ",
                    "         --stack ", {
                      "Ref": "AWS::StackName"
                    },
                    "         --resource LaunchConfig ",
                    "         --region ", {
                      "Ref": "AWS::Region"
                    }, "\n",
                    "runas=root\n"
                  ]]
                }
              }
            },

            "commands": {
              "00) Unpack 'mybb-www.tar.gz' file into its application directory": {
                "command": "tar xf /usr/local/share/mybb/mybb-www.tar.gz -C /var/www/html --strip 1"
              },

              "01) Set 'apache' user and group as mybb directory owners": {
                "command": "chown -R apache.apache /var/www/html"
              },

              "02) Set permissions to all subdirectories nested into mybb application main directory": {
                "command": "find /var/www/html -type d -exec chmod 0775 {} \\;"
              },

              "03) Set permissions to all files nested into mybb application main directory": {
                "command": "find /var/www/html -type f -exec chmod 0664 {} \\;"
              },

              "04) Apply all recommended permissions to some directories nested into mybb application main directory": {
                "command": "chmod 0777 /var/www/html/{uploads{,/avatars},inc/languages,admin/backups,cache{,/themes}}"
              },

              "05) Create the 'lock' file, so mybb application do not prompts for its own installation procedure": {
                "command": "touch /var/www/html/install/lock"
              },

              "06) Fill DATABASE occurences from 'config.php' file": {
                "command": {
                  "Fn::Join": ["", [
                    "sed -i -e 's/DATABASE/", {
                      "Ref": "DBName"
                    }, "/g' /var/www/html/inc/config.php"
                  ]]
                }
              },

              "07) Fill HOSTNAME occurences into 'config.php'": {
                "command": {
                  "Fn::Join": ["", [
                    "sed -i -e 's/HOSTNAME/", {
                      "Fn::GetAtt": ["MySQLDatabase", "Endpoint.Address"]
                    }, "/g' /var/www/html/inc/config.php"
                  ]]
                }
              },

              "08) Fill USERNAME occurences into 'config.php'": {
                "command": {
                  "Fn::Join": ["", [
                    "sed -i -e 's/USERNAME/", {
                      "Ref": "DBUser"
                    }, "/g' /var/www/html/inc/config.php"
                  ]]
                }
              },

              "09) Fill PASSWORD occurences into 'config.php'": {
                "command": {
                  "Fn::Join": ["", [
                    "sed -i -e 's/PASSWORD/", {
                      "Ref": "DBPassword"
                    }, "/g' /var/www/html/inc/config.php"
                  ]]
                }
              },

              "10) Fill URL occurences into 'settings.php'": {
                "command": {
                  "Fn::Join": ["", [
                    "sed -i -e 's/URL/", {
                      "Fn::GetAtt": ["ElasticLoadBalancer", "DNSName"]
                    }, "/g' /var/www/html/inc/settings.php"
                  ]]
                }
              },

              "11) Restore mybb-dump.sql if database is empty": {
                "command": {
                  "Fn::Join": ["", [
                    "count=$(mysql",
                    " -h", {
                      "Fn::GetAtt": ["MySQLDatabase", "Endpoint.Address"]
                    },
                    " -u", {
                      "Ref": "DBUser"
                    },
                    " -p", {
                      "Ref": "DBPassword"
                    },
                    " -e 'SELECT COUNT(DISTINCT table_name) FROM information_schema.columns WHERE table_schema = \"", {
                      "Ref": "DBName"
                    }, "\";'",
                    " | awk '{print $1}' | tail -1);",
                    " if [ ${count} -eq 0 ]; then",
                    " cp /usr/local/share/mybb/mybb-dump.sql /tmp;",
                    " sed -i 's/ENDPOINT_URL/", {
                      "Fn::GetAtt": ["ElasticLoadBalancer", "DNSName"]
                    }, "/g' /tmp/mybb-dump.sql;",
                    " mysql",
                    " -h", {
                      "Fn::GetAtt": ["MySQLDatabase", "Endpoint.Address"]
                    },
                    " -u", {
                      "Ref": "DBUser"
                    },
                    " -p", {
                      "Ref": "DBPassword"
                    },
                    " ", {
                      "Ref": "DBName"
                    },
                    " < /tmp/mybb-dump.sql;",
                    " rm /tmp/mybb-dump.sql;",
                    " fi"
                  ]]
                }
              },

              "12) Create awslogs state directory": {
                "command": "mkdir -p /var/awslogs/state"
              },

              "13) Configure New Relic monitoring access key": {
                "command": {
                  "Fn::Join": ["", [
                    "nrsysmond-config --set license_key=", {
                      "Ref": "NewRelicLicenseKey"
                    }
                  ]]
                }
              },

              "14) Install New Relic PHP agent in silent mode": {
                "command": {
                  "Fn::Join": ["", [
                    "export",
                    " NR_INSTALL_SILENT='true'",
                    " NR_INSTALL_NOKSH='true'",
                    " NR_INSTALL_KEY='", {
                      "Ref": "NewRelicLicenseKey"
                    }, "';",
                    " newrelic-install install;"
                  ]]
                }
              },

              "15) Restart the Apache daemon, so the New Relic PHP agent can act": {
                "command": "service httpd restart"
              }
            },

            "services": {
              "sysvinit": {
                "httpd": {
                  "enabled": "true",
                  "ensureRunning": "true"
                },
                "cfn-hup": {
                  "enabled": "true",
                  "ensureRunning": "true",
                  "files": ["/etc/cfn/cfn-hup.conf", "/etc/cfn/hooks.d/cfn-auto-reloader.conf"]
                },
                "newrelic-sysmond": {
                  "enabled": "true",
                  "ensureRunning": "true",
                  "files": ["/etc/newrelic/nrsysmond.cfg"]
                },
                "awslogs": {
                  "enabled": "true",
                  "ensureRunning": "true",
                  "files": ["/etc/awslogs/awslogs.conf"]
                }
              }
            }
          }
        }
      },

      "Properties": {
        "AssociatePublicIpAddress": "true",
        "ImageId": {
          "Fn::FindInMap": [
            "AWSRegionArch2AMI",
            {
              "Ref": "AWS::Region"
            },
            {
              "Fn::FindInMap": [
                "AWSInstanceType2Arch",
                {
                  "Ref": "InstanceType"
                },
                "Arch"
              ]
            }
          ]
        },
        "InstanceType": {
          "Ref": "InstanceType"
        },
        "IamInstanceProfile": {
          "Ref": "LogRoleInstanceProfile"
        },
        "SecurityGroups": [{
          "Ref": "WebServerSecurityGroup"
        }],
        "KeyName": {
          "Ref": "KeyName"
        },
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": ["", [
              "#!/bin/bash -xe\n",
              "yum update -y aws-cfn-bootstrap\n",

              "# Install the files and packages from the metadata\n",
              "/opt/aws/bin/cfn-init -v ",
              "         --stack ", {
                "Ref": "AWS::StackName"
              },
              "         --resource LaunchConfig ",
              "         --region ", {
                "Ref": "AWS::Region"
              }, "\n",

              "# Signal the status from cfn-init\n",
              "/opt/aws/bin/cfn-signal -e $? ",
              "         --stack ", {
                "Ref": "AWS::StackName"
              },
              "         --resource WebServerAutoScalingGroup ",
              "         --region ", {
                "Ref": "AWS::Region"
              }, "\n"
            ]]
          }
        }
      }
  },
  "WebServerAutoScalingGroup": {
    "Type": "AWS::AutoScaling::AutoScalingGroup",
    "Properties": {
      "AvailabilityZones": [{
        "Fn::GetAtt": ["PublicSubnet", "AvailabilityZone"]
      }],
      "VPCZoneIdentifier": [{
        "Ref": "PublicSubnet"
      }],
      "LaunchConfigurationName": {
        "Ref": "LaunchConfig"
      },
      "MinSize": "2",
      "MaxSize": "10",
      "LoadBalancerNames": [{
        "Ref": "ElasticLoadBalancer"
      }],
      "DesiredCapacity": {
        "Ref": "WebServerCapacity"
      },
      "NotificationConfigurations": [{
        "TopicARN": {
          "Ref": "AlarmTopic"
        },
        "NotificationTypes": [
          "autoscaling:EC2_INSTANCE_LAUNCH",
          "autoscaling:EC2_INSTANCE_LAUNCH_ERROR",
          "autoscaling:EC2_INSTANCE_TERMINATE",
          "autoscaling:EC2_INSTANCE_TERMINATE_ERROR"
        ]
      }],
      "Tags": [{
        "Key": "Network",
        "Value": "Public",
        "PropagateAtLaunch": "true"
      }]
    }
  },
  "WebServerScaleUpPolicy": {
    "Type": "AWS::AutoScaling::ScalingPolicy",
    "Properties": {
      "AdjustmentType": "ChangeInCapacity",
      "AutoScalingGroupName": {
        "Ref": "WebServerAutoScalingGroup"
      },
      "Cooldown": "60",
      "ScalingAdjustment": "1"
    }
  },
  "WebServerScaleDownPolicy": {
    "Type": "AWS::AutoScaling::ScalingPolicy",
    "Properties": {
      "AdjustmentType": "ChangeInCapacity",
      "AutoScalingGroupName": {
        "Ref": "WebServerAutoScalingGroup"
      },
      "Cooldown": "60",
      "ScalingAdjustment": "-1"
    }
  },
  "CPUAlarmHigh": {
    "Type": "AWS::CloudWatch::Alarm",
    "Properties": {
      "AlarmDescription": "Scale-up if CPU > 90% for 10 minutes",
      "MetricName": "CPUUtilization",
      "Namespace": "AWS/EC2",
      "Statistic": "Average",
      "Period": "300",
      "EvaluationPeriods": "2",
      "Threshold": "90",
      "AlarmActions": [{
        "Ref": "WebServerScaleUpPolicy"
      }],
      "Dimensions": [{
        "Name": "AutoScalingGroupName",
        "Value": {
          "Ref": "WebServerAutoScalingGroup"
        }
      }],
      "ComparisonOperator": "GreaterThanThreshold"
    }
  },
  "CPUAlarmLow": {
    "Type": "AWS::CloudWatch::Alarm",
    "Properties": {
      "AlarmDescription": "Scale-down if CPU < 70% for 10 minutes",
      "MetricName": "CPUUtilization",
      "Namespace": "AWS/EC2",
      "Statistic": "Average",
      "Period": "300",
      "EvaluationPeriods": "2",
      "Threshold": "70",
      "AlarmActions": [{
        "Ref": "WebServerScaleDownPolicy"
      }],
      "Dimensions": [{
        "Name": "AutoScalingGroupName",
        "Value": {
          "Ref": "WebServerAutoScalingGroup"
        }
      }],
      "ComparisonOperator": "LessThanThreshold"
    }
  },
  "WebServerSecurityGroup": {
    "Type": "AWS::EC2::SecurityGroup",
    "Properties": {
      "GroupDescription": "Allow access from load balancer, and outbound HTTP and HTTPS traffic",
      "VpcId": {
        "Ref": "VPC"
      },
      "SecurityGroupIngress": [{
          "IpProtocol": "tcp",
          "FromPort": "80",
          "ToPort": "80",
          "SourceSecurityGroupId": {
            "Ref": "PublicLoadBalancerSecurityGroup"
          }
        },
        {
          "IpProtocol": "tcp",
          "FromPort": "22",
          "ToPort": "22",
          "CidrIp": {
            "Ref": "SSHLocation"
          }
        }
      ]
    }
  },
    "DBEC2SecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription": "Open Database for EC2 Access",
        "SecurityGroupIngress" : [{
          "IpProtocol" : "tcp",
          "FromPort" : "3306",
          "ToPort" : "3306",
          "SourceSecurityGroupId" : { "Ref" : "WebServerSecurityGroup" }
        }],
        "VpcId" : { "Ref" : "VPC" }
      }
    },
        "RDSDBSubnetGroup" : {
      "Type" : "AWS::RDS::DBSubnetGroup",
      "Properties" : {
        "DBSubnetGroupDescription" : "Subnets available for the RDS DB Instance",
        "SubnetIds" : [ { "Ref" : "RDSSubnet1" }, { "Ref" : "RDSSubnet2" } ]
      }
    },
    "MySQLDatabase": {
      "Type": "AWS::RDS::DBInstance",
      "Properties": {
        "AllocatedStorage": { "Ref" : "DBAllocatedStorage" },
        "DBInstanceClass": { "Ref" : "DBClass" },
        "DBName" : { "Ref": "DBName" },
        "DBSubnetGroupName" : { "Ref" : "RDSDBSubnetGroup" },
        "Engine" : "MySQL",
        "MultiAZ" : { "Fn::FindInMap" : [ "AWSRegionCapabilities", { "Ref" : "AWS::Region" }, "RDSMultiAZ"] },
        "MasterUsername": { "Ref": "DBUser" },
        "MasterUserPassword": { "Ref" : "DBPassword" },
        "VPCSecurityGroups" : [ { "Fn::GetAtt": [ "DBEC2SecurityGroup", "GroupId" ] } ]
      }
    },
  "RequestLatencyAlarmHigh": {
    "Type": "AWS::CloudWatch::Alarm",
    "Properties": {
      "AlarmDescription": "Alarm if there aren't any requests coming through",
      "AlarmActions": [{
        "Ref": "AlarmTopic"
      }],
      "InsufficientDataActions": [{
        "Ref": "AlarmTopic"
      }],
      "MetricName": "Latency",
      "Namespace": "AWS/ELB",
      "Statistic": "Average",
      "Period": "60",
      "EvaluationPeriods": "1",
      "Threshold": "1",
      "ComparisonOperator": "GreaterThanThreshold",
      "Dimensions": [{
        "Name": "LoadBalancerName",
        "Value": {
          "Ref": "ElasticLoadBalancer"
        }
      }]
    }
  },
  "TooManyUnhealthyHostsAlarm": {
    "Type": "AWS::CloudWatch::Alarm",
    "Properties": {
      "AlarmDescription": "Alarm if there are too many unhealthy hosts.",
      "AlarmActions": [{
        "Ref": "AlarmTopic"
      }],
      "InsufficientDataActions": [{
        "Ref": "AlarmTopic"
      }],
      "MetricName": "UnHealthyHostCount",
      "Namespace": "AWS/ELB",
      "Statistic": "Average",
      "Period": "60",
      "EvaluationPeriods": "1",
      "Threshold": "0",
      "ComparisonOperator": "GreaterThanThreshold",
      "Dimensions": [{
        "Name": "LoadBalancerName",
        "Value": {
          "Ref": "ElasticLoadBalancer"
        }
      }]
    }}
  },
  "Outputs": {
    "URL": {
      "Description": "URL for MyBB website",
      "Value": {
        "Fn::Join": ["", ["http://", {
          "Fn::GetAtt": ["ElasticLoadBalancer", "DNSName"]
        }, "/"]]
      }
    }
  
}
}